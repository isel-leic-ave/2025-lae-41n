/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package lesson03

import java.util.Date
import java.time.LocalDate
import kotlin.reflect.KClass
import kotlin.reflect.KFunction
import kotlin.reflect.KParameter
import kotlin.reflect.full.findAnnotation
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties
import kotlin.reflect.full.primaryConstructor

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}


@Target(AnnotationTarget.PROPERTY)
annotation class PropertyMapping(val alternativeName: String)



data class CourseExt(
    @PropertyMapping("courseName") val name: String,
    val semester: Int,
    val  programme: String) {

}
data class CourseInternal(
    @PropertyMapping("name")val courseName: String,val semester: Int, val programme: String) {}


fun mapCourseExtToCourseInternal(courseExt: CourseExt): CourseInternal {
    return CourseInternal(courseExt.name, courseExt.semester, courseExt.programme)
}

fun mapCourseInternalToCourseExternal(courseInt: CourseInternal): CourseExt {
    return CourseExt(courseInt.courseName, courseInt.semester, courseInt.programme)
}

fun mapper(src: Any, dstRep: KClass<*> ): Any? {
    val srcKProperties = src::class.memberProperties
    fun getValueForParameter(parameter: KParameter): Any {
        val propRep = srcKProperties.first { (it.findAnnotation<PropertyMapping>()?.alternativeName == parameter.name) || it.name == parameter.name }
        return propRep.getter.call(src)!!
    }
    val primaryConstructor = dstRep.primaryConstructor
    val parameters: Map<KParameter, Any>? = primaryConstructor?.parameters?.associateWith {
        getValueForParameter(it)
    }
    return dstRep.primaryConstructor?.callBy(parameters!!)
}

fun getMonthRep(obj: Any): KFunction<*> {
    return obj::class.memberFunctions.first { it.name == "getMonth"}
}


fun main() {
    val d = Date()
    val d1 = Date(124, 9, 1)

    var ld: LocalDate = LocalDate.parse("2018-12-12")

    //println(Date::class === d::class)

    var dateKClass: KClass<Date> = Date::class
    println(dateKClass.primaryConstructor)


//    dateKClass.memberFunctions.forEach { println(it) }

    var getMonthRep: KFunction<*> = dateKClass.memberFunctions.first { it.name == "getMonth" }
    var getMonthLocalDateRep: KFunction<*> = LocalDate::class.memberFunctions.first { it.name == "getMonth" }
    println(getMonthRep.call(d))
    println(getMonthRep.call(d1))
    println(getMonthLocalDateRep.call(ld))

    val ext = CourseExt("LAE", 4, "LEIC")
    val internal: CourseInternal = mapper(ext, CourseInternal::class) as CourseInternal
    println(internal)
    val ext1 = mapper(internal, CourseExt::class) as CourseExt
    println(ext1)
}


